import java.util.*;

class LNode
{
    int data;
    LNode next;
    LNode(int d) {
        data = d; 
        next = null;
    }
}

class TNode
{
    int data;
    TNode left, right;
    TNode(int x)
    {
        data=x;
        left=right=null;
    }
    
}


class ListToBST
{
    
  /* Function to print linked list */
   public static void preOrder(TNode root)
    {
        
        if(root==null)
            return;
            
        System.out.print(root.data+" ");
        preOrder(root.left);
        preOrder(root.right);
    }
	
	 
 
     /* Driver program to test above functions */
    public static void main(String args[])
    {
       
         
        /* Constructed Linked List is 1->2->3->4->5->6->
           7->8->8->9->null */
         Scanner sc = new Scanner(System.in);
		 int t=sc.nextInt();
		 
		 while(t>0)
         {
			int n = sc.nextInt();
			LNode head = new LNode(sc.nextInt());
            LNode tail = head;
            for(int i=0; i<n-1; i++)
            {
                tail.next = new LNode(sc.nextInt());
                tail = tail.next;
            }
		
			Solution obj = new Solution();
			TNode root = obj.sortedListToBST(head);
			preOrder(root);
			
			System.out.println();
			
			t--;
			
         }
    }
}
// } Driver Code Ends


//User function Template for Java

/*Linked List Node
class LNode
{
    int data;
    LNode next;
    LNode(int d) {
        data = d; 
        next = null;
    }
}

//Tree Node
class TNode
{
    int data;
    TNode left, right;
    TNode(int x)
    {
        data=x;
        left=right=null;
    }
    
}*/

class Solution
{
    public TNode sortedListToBST(LNode head)
    {    
           int n= arraysize(head);
           int arr[]=new int[n];
           int i=0;
           while(head!=null)
           {
               arr[i]=head.data;
               head=head.next;
               ++i;
           }
           
           return solve(arr,0,n-1);}
           
    public TNode solve(int arr[],int min,int max)
           {
               if(min>max)
               return null;
               
               int mid=(min+1+max)/2;
               TNode root=new TNode(arr[mid]);
               root.left=solve(arr,min,mid-1);
               root.right=solve(arr,mid+1,max);
               return root;
    }
    
    public int arraysize(LNode head)
    { int n=0;
        while(head!=null)
        {
            ++n;
            head=head.next;
        }
        return n;
    }
   
}


https://practice.geeksforgeeks.org/problems/sorted-list-to-bst/1/?category[]=Linked%20List&category[]=Linked%20List&page=1&sortBy=newest&query=category[]Linked%20Listpage1sortBynewestcategory[]Linked%20List
